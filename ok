def to_print_choices(x):
	ans = "["
	for i in x:
		if i == (0.0, float("inf")):
			ans += "(0.0, float(\"inf\"))"
		else:
			ans += (str(i))
		ans += ','
	ans = ans[:-1]
	ans += ']'
	return ans

def create_bound(x):
	if x == '0\n' or x == '0':
		x = '0.0'
	else:
		x = "float(\"inf\")"


def negate(x):
	return [-i for i in x]


class Equal:
	def __init__(self, x):
		self.x = float(x)
	def representation(self):
		return "equal to " + str(self.x)
	def to_tuple(self):
		return (0.0, self.x)
		#s = "(" + str(self.x) + "," + str(self.x) + ")"
		#return s
class Unbounded:
	def representation(self):
		return "without bounds"
	def to_tuple(self):
		return (0.0, float("inf"))
		#s = "(0.0," + str(self.x) + ")"
		#return s
class Greater:
	def __init__(self, x):
		self.x = float(x)
	def representation(self):
		return "more than " + str(self.x)
	def to_tuple(self):
		return (self.x, float("inf"))
class Less:
	def __init__(self, x):
		self.x = float(x)
	def representation(self):
		return "less than " + str(self.x)
	def to_tuple(self):
		return (0.0, self.x)

class Bounded:
	def __init__(self, x, y):
		self.low = float(x)
		self.high = float(y)
	def representation(self):
		return "between " + str(self.low) + " and " + str(self.high)
	def to_tuple(self):
		return (self.low, self.high)

def to_bound(x):
	a, *b = x.split()
	if a == "E":
		return Equal(b[0])
	elif a == "U":
		return Unbounded()
	elif a == "L":
		return Less(b[0])
	elif a == "G":
		return Greater(b[0])
	elif a == "B":
		return Bounded(b[0], b[1])
	exit("error")

def to_float(x):
	return [float(k) for k in x]


def build_system(choice, limits, min_functions, content):
	print("from scipy.optimize import linprog")
	
	z = list(zip(limits, content))
	print(z)
	lhs_ineq = []
	rhs_ineq = []
	lhs_eq = []
	rhs_eq = []
	
	for x in z:
		a, b = x
		if isinstance(a, Unbounded):
			continue
		elif isinstance(a, Bounded):
			low = a.low
			high = a.high
			
			lhs_ineq.append(negate(b))
			rhs_ineq.append(-1*low)
			lhs_ineq.append(b)
			rhs_ineq.append(high)
			
		elif isinstance(a, Less):
			k = a.x
			lhs_ineq.append(b)
			lhs_ineq.append(k)
		elif isinstance(a, Greater):
			k = a.x
			lhs_ineq.append(negate(b))
			rhs_ineq.append(-1*k)
		elif isinstance(a, Equal):
			k = a.x
			lhs_eq.append(b)
			rhs_eq.append(k)
		else:
			exit()

	print("lhs_ineq = " + str(lhs_ineq))
	print("rhs_ineq = " + str(rhs_ineq))
	
	print("lhs_eq = " + str(lhs_eq))
	print("rhs_eq = " + str(rhs_eq))
	print("bnd = " + choice)
	print("obj = " + str(min_functions))

	print("""opt = linprog(c=obj, A_ub=lhs_ineq, b_ub=rhs_ineq,A_eq=lhs_eq, b_eq=rhs_eq, bounds=bnd, method=\"revised simplex\")""")
	print("print(opt)")
	print("a = [round(i*100.0, 2) for i in opt.x]")
	print("print(a)")

import itertools
_, *aux = open("choice.csv")
choices = []
for c in aux:
	name, value, *c = c.split(',')
	#print(value)
	if value.endswith('\n'):
		value = value[:-1]
	
	choices.append("(0.0, float(" + str(value) + "))")
	choice = '[' + ",".join(choices) + ']'
print(choice)
_, *aux = open("limits.csv")
limits = []
for c in aux:
	name, *value = c.split(',')
	value = to_bound(value[0])
	limits.append(value)
print(limits)

_, *aux = open("min_function.csv")
min_functions = []
for c in aux:
	name, *values = c.split(',')
	min_functions.append(float(values[0]))
print(min_functions)


aux = open("content.csv").read().split('\n')
content = [to_float(i.split(',')[1:]) for i in aux[1:]]
content = list(map(list, itertools.zip_longest(*content, fillvalue=None)))
print(content)


sys = build_system(choice, limits, min_functions, content)


